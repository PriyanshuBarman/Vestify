generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String?
  isAdmin        Boolean          @default(false)
  avatar         String?
  balance        Decimal          @default(1000.00) @db.Decimal(10, 2)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  transactions   Transaction[]
  mfPortfolio    MfPortfolio[]
  mfHolding      MfHolding[]
  stockPortfolio StockPortfolio[]
  stockHoldings  StockHolding[]
  userPortfolio  UserPortfolio[]
  mfWatchlist    MfWatchlist[]
  stockWatchlist StockWatchlist[]
}

// ======== UserPortfolio =======

model UserPortfolio {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolioType PortfolioType
  invested      Decimal       @db.Decimal(10, 2)
  current       Decimal       @db.Decimal(10, 2)
  pnl           Decimal       @default(0.00) @db.Decimal(10, 2)
  returnPercent Decimal       @default(0.00) @db.Decimal(8, 2)
  updatedAt     DateTime      @default(now()) @updatedAt

  @@unique([userId, portfolioType])
}

enum PortfolioType {
  MF
  STOCK
  GOLD
}

// ======== Transaction =======

model Transaction {
  id        String          @id @default(uuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Decimal         @db.Decimal(10, 2)
  assetType AssetType?
  code      String?
  name      String?
  tnxType   TransactionType
  quantity  Decimal?        @db.Decimal(10, 2)
  price     Decimal?        @db.Decimal(10, 4)
  createdAt DateTime        @default(now())
}

enum AssetType {
  MF
  STOCK
  GOLD
}

enum TransactionType {
  DEPOSIT
  BUY
  SELL
}

// =============================================== MUTUAL FUND ==============================================

// ======== MfPortfolio =======

model MfPortfolio {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  latestNav        Decimal  @db.Decimal(10, 4) // stores latest nav (it also needs to updates every day )
  fundCode         String
  fundName         String
  shortName        String
  fundType         FundType
  logoCode         String // it's need to get fund logo
  units            Decimal  @db.Decimal(10, 4)
  invested         Decimal  @db.Decimal(10, 2)
  current          Decimal  @db.Decimal(10, 2)
  pnl              Decimal  @default(0.00) @db.Decimal(10, 2)
  returnPercent    Decimal  @default(0.00) @db.Decimal(8, 2)
  dayChangePercent Decimal? @default(0.00) @db.Decimal(5, 2)
  dayChangeValue   Decimal? @default(0) @db.Decimal(10, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([userId, fundCode])
}

enum FundType {
  EQUITY
  DEBT
  HYBRID
  OTHER
}

// ======== MfHoldings =======

model MfHolding {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fundCode     String
  fundName     String
  purchaseNav  Decimal  @db.Decimal(10, 4)
  units        Decimal  @db.Decimal(10, 4)
  amount       Decimal  @db.Decimal(10, 2)
  purchaseDate DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

// ======== MfWatchlist =======

model MfWatchlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fundCode  String
  fundName  String
  createdAt DateTime @default(now())

  @@unique([userId, fundCode])
}

// ===============================================// MUTUAL FUND ==============================================

// =============================================== STOCK ==============================================

// ======== StockPortfolio =======

model StockPortfolio {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol        String
  stockName     String
  quantity      Int
  latestPrice   Decimal? @db.Decimal(10, 2)
  invested      Decimal  @db.Decimal(10, 2)
  current       Decimal  @db.Decimal(10, 2)
  pnl           Decimal  @default(0.00) @db.Decimal(10, 2)
  returnPercent Decimal  @default(0.00) @db.Decimal(8, 2)
  updatedAt     DateTime @default(now()) @updatedAt

  @@unique([userId, symbol])
}

// ======== StockHolding =======

model StockHolding {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol       String
  stockName    String
  amount       Decimal  @db.Decimal(10, 2)
  quantity     Int      @default(0)
  price        Decimal  @db.Decimal(10, 2)
  purchaseDate DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

// ======== StockWatchlist =======

model StockWatchlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol    String
  stockName String
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}

// ===============================================// STOCK ==============================================
