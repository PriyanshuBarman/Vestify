generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String?
  pin            String?
  hasPin         Boolean   @default(false)
  role           Role      @default(USER)
  balance        Decimal   @default(0) @db.Decimal(18, 2)
  lastRewardedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile             Profile?
  mfPortfolio         MfPortfolio[]
  mfHolding           MfHolding[]
  mfWatchlist         MfWatchlist[]
  mfOrders            MfOrder[]
  mfSips              MfSip[]
  pendingMfSipChanges PendingMfSipChange[]
  transactions        Transaction[]        @relation("UserTransactions")
  peerTransactions    Transaction[]        @relation("PeerTransactions")
  ResetPasswordToken  ResetPasswordToken?
  EmailChangeRequest  EmailChangeRequest?

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Profile {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profiles")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([token])
  @@map("reset_password_tokens")
}

model EmailChangeRequest {
  id        String   @id @default(uuid())
  newEmail  String
  otpHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
  @@map("email_change_requests")
}

// ======== Transaction =======
model Transaction {
  id             String          @id @default(uuid())
  amount         Decimal         @db.Decimal(18, 2)
  note           String?
  type           TransactionType
  updatedBalance Decimal         @db.Decimal(18, 2)
  createdAt      DateTime        @default(now())

  // Wallet owner
  user   User   @relation("UserTransactions", fields: [userId], references: [id], onDelete: Restrict)
  userId String

  // For Peer-to-peer transactions
  peerUser   User?   @relation("PeerTransactions", fields: [peerUserId], references: [id], onDelete: Restrict)
  peerUserId String?

  // For Asset-based transactions
  assetCategory AssetCategory?
  // assetId       String? // e.g. fund code, stock symbol, etc.
  assetOrder    MfOrder?       @relation(fields: [assetOrderId], references: [id], onDelete: Restrict)
  assetOrderId  String?

  @@map("transactions")
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum AssetCategory {
  MUTUAL_FUND
  GOLD
  STOCK
}

// =============================================== MUTUAL FUND ==============================================

model MfOrder {
  id              String    @id @default(uuid())
  schemeCode      Int
  fundName        String
  shortName       String
  fundHouseDomain String
  fundType        FundType
  orderType       OrderType
  status          Status    @default(PENDING)
  amount          Decimal?  @db.Decimal(18, 2)
  units           Decimal?  @db.Decimal(36, 18)
  method          TnxMethod @default(REGULAR)
  sipId           String?
  processDate     DateTime  @db.Date
  navDate         DateTime  @db.Date
  nav             Decimal?  @db.Decimal(10, 4)
  failureReason   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Transaction Transaction[]

  @@map("mf_orders")
}

enum TnxMethod {
  REGULAR
  SIP
  SWP
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

enum OrderType {
  ONE_TIME
  REDEEM
  SIP_INSTALLMENT
  NEW_SIP
}

model MfPortfolio {
  id               String   @id @default(uuid())
  schemeCode       Int
  fundName         String
  shortName        String
  fundType         FundType
  fundHouseDomain  String // it's need to get fund logo
  units            Decimal  @db.Decimal(36, 18)
  invested         Decimal  @db.Decimal(18, 2)
  current          Decimal  @db.Decimal(18, 2)
  pnl              Decimal  @default(0.00) @db.Decimal(18, 2)
  returnPercent    Decimal  @default(0.00) @db.Decimal(8, 2)
  dayChangePercent Decimal? @default(0.00) @db.Decimal(5, 2)
  dayChangeValue   Decimal? @default(0) @db.Decimal(10, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mfHoldings MfHolding[]

  @@unique([userId, schemeCode])
  @@map("mf_portfolios")
}

enum FundType {
  EQUITY
  DEBT
  HYBRID
  OTHERS
  SOLUTION_ORIENTED
}

model MfHolding {
  id         String   @id @default(uuid())
  schemeCode Int
  nav        Decimal  @db.Decimal(10, 4) // purchase/redeem nav
  units      Decimal  @db.Decimal(36, 18) // purchase/redeem units
  amount     Decimal  @db.Decimal(18, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  mfPortfolio MfPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String

  @@map("mf_holdings")
}

model MfSip {
  id                  String   @id @default(uuid())
  sipDate             Int
  nextInstallmentDate DateTime @db.Date
  fundName            String
  shortName           String
  fundCategory        String
  fundType            FundType
  schemeCode          Int
  amount              Decimal  @db.Decimal(18, 2)
  fundHouseDomain     String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  pendingChanges PendingMfSipChange[]

  @@index([userId, schemeCode])
  @@map("mf_sips")
}

enum SipStatus {
  ACTIVE
  PAUSED
}

model PendingMfSipChange {
  id                  String    @id @default(uuid())
  amount              Decimal?  @db.Decimal(18, 2) // future amount
  sipDate             Int?
  nextInstallmentDate DateTime? @db.Date
  applyDate           DateTime  @db.Date // when these changes should be applied
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  mfSip  MfSip  @relation(fields: [sipId], references: [id], onDelete: Cascade)
  sipId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, sipId])
  @@map("pending_mf_sip_changes")
}

model MfWatchlist {
  id              String   @id @default(uuid())
  schemeCode      Int
  shortName       String
  fundName        String
  fundHouseDomain String
  createdAt       DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, schemeCode])
  @@map("mf_watchlists")
}
